// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract mytoken {
    string public _name;
    string public _symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public owner;

     event Mint(address indexed to, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _name = "Ayush";
        _symbol = "ARH";
        decimals = 18;
        totalSupply = 100 * 7**uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;

        address[] memory addresses = new address[](3); 
        addresses[0] = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;
        addresses[1] = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;

        uint256 tokensPerAddress = 100 * 7**uint256(decimals);

        for (uint256 i = 0; i < addresses.length; i++) {
            balanceOf[addresses[i]] += tokensPerAddress;
            totalSupply += tokensPerAddress;
            emit Transfer(address(0), addresses[i], tokensPerAddress);
            emit Mint(addresses[i], tokensPerAddress);
        }
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can  edit");
        _;
    }

    function mint(address _to, uint256 _amount) public onlyOwner {
        require(_to != address(0), "your address is Invalid");
        totalSupply += _amount;
        balanceOf[_to] += _amount;
        emit Mint(_to, _amount);
        emit Transfer(address(0), _to, _amount);
    }

    function burn(uint256 _amount) public {
        require(balanceOf[msg.sender] >= _amount, "you do not have sufficient balance");
        balanceOf[msg.sender] -= _amount;
        totalSupply -= _amount;
        emit Transfer(msg.sender, address(0), _amount);
    }

    function transfer(address _to, uint256 _amount) public {
        require(_to != address(0), "your address is Invalid");
        require(balanceOf[msg.sender] >= _amount, "you do not have sufficient balance");
        balanceOf[msg.sender] -= _amount;
        balanceOf[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
    }
    

    function changeOwner(address _newOwner) public onlyOwner {
        require(_newOwner != address(0), "your address is Invalid");
        address _previousOwner = owner;
        owner = _newOwner;
        emit OwnershipTransferred(_previousOwner, _newOwner);
    }
}
